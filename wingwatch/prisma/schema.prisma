// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model places {
    place_id                    String   @id @default(cuid())
    name                        String
    address                     String
    description                 String?
    latitude                    Float
    longitude                   Float
    path_id                     String
    path                        paths    @relation(fields: [path_id], references: [path_id])
    google_maps_uri             String
    airport                     String
    distance_from_flightpath    Float
    average_altitude            Float
    distance_from_airport       Float
    ratings                     Rating[]
    reviews                     Review[]
    favorites                   Favorited[]
}

model paths {
    path_id                     String @id
    latitude                    Float[]
    longitude                   Float[]
    places                      places[]
}

// Necessary for Next auth
model Account {
    id                          String  @id @default(cuid())
    userId                      String
    type                        String
    provider                    String
    providerAccountId           String
    refresh_token               String? // @db.Text
    refresh_token_expires_in    Int?
    access_token                String? // @db.Text
    expires_at                  Int?
    token_type                  String?
    scope                       String?
    id_token                    String? // @db.Text
    session_state               String?
    user                        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ratings       Rating[]
    reviews       Review[]
    favorites     Favorited[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Rating {
    id         String   @id @default(cuid())
    value      Int      
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    place      places   @relation(fields: [placeId], references: [place_id])
    placeId    String

    @@unique([userId, placeId]) // Ensure a user can rate a place only once
}


model Review {
    id         String   @id @default(cuid())
    title      String
    content    String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    place      places   @relation(fields: [placeId], references: [place_id])
    placeId    String
}


model Favorited {
    id       String   @id @default(cuid())
    user     User     @relation(fields: [userId], references: [id])
    userId   String
    place    places   @relation(fields: [placeId], references: [place_id])
    placeId  String

    @@unique([userId, placeId]) // Ensure a place is only favorited once by a user
}
